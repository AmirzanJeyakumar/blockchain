What does a Block look like?

Each Block has an index, a timestamp (in Unix time), a list of transactions, a proof (more on that later), and the hash
of the previous Block.
Each new block contains within itself, the hash of the previous Block.
This is crucial because it’s what gives blockchains immutability: If an attacker corrupted an earlier Block in the chain
then all subsequent blocks will contain incorrect hashes.
After new_transaction() adds a transaction to the list, it returns the index of the block which the transaction will be
added to—the next one to be mined.

Creating new Blocks

When our Blockchain is instantiated we’ll need to seed it with a genesis block—a block with no predecessors.
We’ll also need to add a “proof” to our genesis block which is the result of mining (or proof of work).

Hashing is the process of scrambling raw information to the extent that it
cannot reproduce it back to its original form. It takes a piece of information and passes it through a
function that performs mathematical operations on the plaintext. This function is called the hash function,
and the output is called the hash value/digest.
SHA 256 is a part of the SHA 2 family of algorithms, where SHA stands for Secure Hash Algorithm.
The significance of the 256 in the name stands for the final hash digest value, i.e. irrespective of the size of
plaintext/clear-text, the hash value will always be 256 bits.

Proof of Work

A Proof of Work algorithm (PoW) is how new Blocks are created or mined on the blockchain. The goal of PoW is to
discover a number which solves a problem. The number must be difficult to find but easy to verify—computationally
speaking—by anyone on the network. This is the core idea behind Proof of Work.

x = 5
y = 0  # We don't know what y should be yet...
while sha256(f'{x*y}'.encode()).hexdigest()[-1] != "0":
    y += 1
print(f'The solution is y = {y}')
The solution here is y = 21. Since, the produced hash ends in 0:
hash(5 * 21) = 1253e9373e...5e3600155e860

The Mining Endpoint

Our mining endpoint is where the magic happens, and it’s easy. It has to do three things:
Calculate the Proof of Work
Reward the miner (us) by adding a transaction granting us 1 coin
Forge the new Block by adding it to the chain

We’ve got a basic Blockchain that accepts transactions and allows us to mine new Blocks. But the whole point of
Blockchains is that they should be decentralized. And if they’re decentralized, how on earth do we ensure that they all
reflect the same chain? This is called the problem of Consensus, and we’ll have to implement a Consensus Algorithm if
we want more than one node in our network.

Registering new Nodes

Before we can implement a Consensus Algorithm, we need a way to let a node know about neighbouring nodes on the network.
Each node on our network should keep a registry of other nodes on the network. Thus, we’ll need some more endpoints:

/nodes/register to accept a list of new nodes in the form of URLs.
/nodes/resolve to implement our Consensus Algorithm, which resolves any conflicts—to ensure a node has the correct chain.

Note that we’ve used a set() to hold the list of nodes. This is a cheap way of ensuring that the addition of new nodes
is idempotent—meaning that no matter how many times we add a specific node, it appears exactly once.

Implementing the Consensus Algorithm

As mentioned, a conflict is when one node has a different chain to another node. To resolve this, we’ll make the rule
that the longest valid chain is authoritative. In other words, the longest chain on the network is the de-facto one.
Using this algorithm, we reach Consensus amongst the nodes in our network.

The first method valid_chain() is responsible for checking if a chain is valid by looping through each block and verifying both the hash and the proof.

resolve_conflicts() is a method which loops through all our neighbouring nodes, downloads their chains and verifies them
using the above method. If a valid chain is found, whose length is greater than ours, we replace ours.
